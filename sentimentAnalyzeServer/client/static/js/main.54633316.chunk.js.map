{"version":3,"sources":["EmotionTable.js","SentimentTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","this","props","emotions","map","item","React","Component","SentimentTable","sentiments","style","color","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","fetch","then","response","text","data","JSON","parse","result","keywords","Object","entries","label","sendForEmotionAnalysis","emotion","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.54633316.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          {/*You can remove this line and the line below. */}\n          <table className=\"table table-bordered\">\n            <tbody>\n            {   \n                this.props.emotions.map((item) => {\n                    return <tr><td>{item[0]}</td><td>{item[1]}</td></tr>\n                })\n                //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import React from 'react';\nimport './bootstrap.min.css';\n\nclass SentimentTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {   \n                this.props.sentiments.map((item) => {\n                    return <tr><td style={{\"color\": this.props.color}}>{item[0]}</td><td style={{\"color\": this.props.color}}>{item[1]}</td></tr>\n                })\n                //Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default SentimentTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport SentimentTable from './SentimentTable.js';\nimport React from 'react';\n\nclass App extends React.Component {\n    state = {\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n    }\n\n    renderTextArea = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"url\") {\n            this.setState({\n                innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n                mode: \"text\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    renderTextBox = () => {\n        document.getElementById(\"textinput\").value = \"\";\n        if (this.state.mode === \"text\") {\n            this.setState({\n                innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n                mode: \"url\",\n                sentimentOutput: [],\n                sentiment: true\n            })\n        }\n    }\n\n    sendForSentimentAnalysis = () => {\n        this.setState({ sentiment: true });\n        let url = \".\";\n\n        if (this.state.mode === \"url\") {\n            \n            url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            \n            url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n        }\n        fetch(url).then((response) => {\n            response.text().then((data) => {\n                this.setState({ sentimentOutput: data });\n                let res = JSON.parse(data);\n                let sentiments = res.result.keywords[0].sentiment;\n                let sentiment = Object.entries(sentiments);\n                let color;\n                if (sentiments.label === \"positive\") {\n                    color = \"green\";\n                } else if (sentiments.label === \"negative\") {\n                    color = \"red\";\n                } else {\n                    color = \"yellow\";\n                }\n                this.setState({ sentimentOutput: <SentimentTable color={color} sentiments={sentiment} /> });\n            })\n        });\n    }\n\n    sendForEmotionAnalysis = () => {\n\n        this.setState({ sentiment: false });\n        let url = \".\";\n        if (this.state.mode === \"url\") {\n            url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n        } else {\n            url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n        }\n        fetch(url).then((response) => {\n            response.text().then((data) => {\n                let res = JSON.parse(data);\n                let emotions = res.result.keywords[0].emotion;\n                let emotion = Object.entries(emotions);\n                this.setState({ sentimentOutput: <EmotionTable emotions={emotion} /> });\n            })\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n                <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n                <br /><br />\n                {this.state.innercomp}\n                <br />\n                <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n                <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n                <br />\n                  {this.state.sentimentOutput}\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}